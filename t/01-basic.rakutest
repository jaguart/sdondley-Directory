use Test;
use Directory;

plan 18;

my $dir;
lives-ok { $dir = Directory.new('t') }, 'creates object';
$dir.open;
my $sep = $*DISTRO.is-win
        ?? IO::Spec::Win32.dir-sep
        !! IO::Spec::Unix.dir-sep;
is $dir.dir[0].Str, 't' ~ $sep ~ '01-basic.rakutest', 'gets contents of directory';
$dir.close;
is $dir.is-empty, False, 'detects directory has content';
my $list;
lives-ok { $list = $dir.list(:Str); }, 'can read a directory with "Str" arg';
lives-ok { $list = $dir.list(:absolute); }, 'can read a directory with "absolute" arg';
is $dir.exists, True, 'determines if directory exists';
$dir = Directory.new('kjkjekjad');
is $dir.exists, False, 'determined if directory does not exist';
dies-ok { Directory.new('t/01-basic.rakutest') }, 'dies when file exists';

$dir = Directory.new('t/test-dir');
is $dir.mktree, True, 'creates directory';
is $dir.is-empty, True, 'detects empty directory';
is $dir.create, True, 'creates directory';
is $dir.exists, True, 'detects that directory exists';
is $dir.empty-directory, True, 'can empty a directory';
is $dir.rmtree, True, 'deletes directory';
is $dir.exists, False, 'detects deleted directory';

$dir = Directory.new('~');
if $*HOME {
    is $dir.path.Str, $*HOME, 'interprets leading tilde as home directory';

    $dir = Directory.new('~/.');
    is $dir.path.Str, $*HOME ~ '/.', 'interprets leading tilde followed by slash correctly';
} else {
    skip 'No $*HOME', 2;
}

$*HOME = '';
dies-ok { $dir = Directory.new('~') }, 'dies when $HOME not set';

done-testing;
